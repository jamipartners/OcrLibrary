// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OcrFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreML
import CoreMedia
import CoreVideo
import Foundation
@_exported import OcrFramework
import Photos
import Swift
import UIKit
import Vision
import _Concurrency
import _StringProcessing
public protocol OCRViewControllerDelegate : AnyObject {
  func sendDataBack(data: [OcrFramework.ServeResponse], imagePath: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class OcrController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: OcrFramework.OCRViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func topView()
  @_Concurrency.MainActor(unsafe) public func bottomView()
  @_Concurrency.MainActor(unsafe) public func squareViewMain()
  @_Concurrency.MainActor(unsafe) public func createGuideLabel()
  @_Concurrency.MainActor(unsafe) public func cereateBottomGuideLabel()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setUpModel()
  @_Concurrency.MainActor(unsafe) public func setUpCamera()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension OcrFramework.OcrController : OcrFramework.VideoCaptureDelegate {
  @_Concurrency.MainActor(unsafe) public func videoCapture(_ capture: OcrFramework.VideoCapture, didCaptureVideoFrame pixelBuffer: CoreVideo.CVPixelBuffer?, timestamp: CoreMedia.CMTime)
  @_Concurrency.MainActor(unsafe) public func image(from pixelBuffer: CoreVideo.CVPixelBuffer) -> UIKit.UIImage?
}
extension OcrFramework.OcrController {
  @_Concurrency.MainActor(unsafe) public func visionRequestDidComplete(request: Vision.VNRequest, error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) public func sendBack(serverResponse: [OcrFramework.ServeResponse], imagePath: Swift.String)
  @_Concurrency.MainActor(unsafe) public func checkForPositionNic() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func reset()
}
public struct Response : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct ServeResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public protocol VideoCaptureDelegate : AnyObject {
  func videoCapture(_ capture: OcrFramework.VideoCapture, didCaptureVideoFrame: CoreVideo.CVPixelBuffer?, timestamp: CoreMedia.CMTime)
}
@objc @_inheritsConvenienceInitializers public class VideoCapture : ObjectiveC.NSObject {
  public var previewLayer: AVFoundation.AVCaptureVideoPreviewLayer?
  weak public var delegate: OcrFramework.VideoCaptureDelegate?
  public var fps: Swift.Int
  public func setUp(sessionPreset: AVFoundation.AVCaptureSession.Preset = .vga640x480, completion: @escaping (Swift.Bool) -> Swift.Void)
  public func start()
  public func stop()
  @objc override dynamic public init()
  @objc deinit
}
extension OcrFramework.VideoCapture : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didDrop sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
